#
# Arithmetic
#

#     bltz reg1 1						 sub reg2 $zero reg2 				 add reg1 reg2 $zero
abs = 000001 reg1 000000000000000000001; 000000 00000 reg2 reg2 00000100010; 000000 reg2 00000 reg1 00000100000
#    lui reg1 immediate[32:16]			 addi reg1 reg1 immediate[16:0]
li = 001111 00000 reg1 immediate[32:16]; 001000 reg1 reg1 immediate[16:0]
#	  add reg1 $zero reg2
neg = 000000 00000 reg2 reg1 00000100000
#	  addu reg1 $zero reg2
negu = 000000 00000 reg2 reg1 00000100001


#
# Multiply and Divide
#

div = UNSUPPORTED
divu = UNSUPPORTED
mulo = UNSUPPORTED
mulou = UNSUPPORTED
rem = UNSUPPORTED
remu = UNSUPPORTED


#
# Logic
#

#	  nor reg1 reg2 $zero
not = 000000 reg2 00000 reg1 0000010011


#
# Shift
#

rol = UNSUPPORTED
ror = UNSUPPORTED


#
# Comparison
#

seq = UNSUPPORTED
sge = UNSUPPORTED
sgeu = UNSUPPORTED
sgt = UNSUPPORTED
sgtu = UNSUPPORTED
sle = UNSUPPORTED
sleu = UNSUPPORTED
sne = UNSUPPORTED


#
# Branch
#

b = UNSUPPORTED
bal = UNSUPPORTED
beqz = 000100 reg1 00000 target_relative[16:0]
bnez = 000100 reg1 00000 target_relative[16:0]
bge = UNSUPPORTED
bgeu = UNSUPPORTED
bgt = UNSUPPORTED
bgtu = UNSUPPORTED
ble = UNSUPPORTED
bleu = UNSUPPORTED
blt = UNSUPPORTED
bltu = UNSUPPORTED


#
# Load and Store
#

#    lui reg1 immediate[32:16]			 addi reg1 reg1 immediate[16:0]
la = 001111 00000 reg1 immediate[32:16]; 001000 reg1 reg1 immediate[16:0]
ld = UNSUPPORTED
ulh = UNSUPPORTED
ulhu = UNSUPPORTED
ulw = UNSUPPORTED
sd = UNSUPPORTED
ush = UNSUPPORTED
usw = UNSUPPORTED


#
# Data Movement
#

#	   add reg2 reg1 $zero
move = 000000 reg2 00000 reg1 00000100000
mfc1.d = UNSUPPORTED


#
# Floating Point Arithmetic
#

l.d = UNSUPPORTED
#     lwc1 fpr1 reg1 immediate[16]
l.s = 110001 reg1 fpr1 immediate[16:0]
#	  sdc1 fpr1 reg1 immediate[16]
s.d = 111101 reg1 fpr1 immediate[16:0]
#	  swc1 fpr1 reg1 immediate[16]
s.s = 111001 reg1 fpr1 immediate[16:0]
