#
# Arithmetic
#
add = 000000 reg2 reg3 reg1 00000100000
addu = 000000 reg2 reg3 reg1 00000100001
addi = 001000 reg2 reg1 immediate[16:0]
addiu = 001001 reg2 reg1 immediate[16:0]
clo = 011100 reg2 00000 reg1 00000100001
clz = 011100 reg2 00000 reg1 00000100000
div = 000000 reg2 reg3 0000000000011010
divu = 000000 reg2 reg3 0000000000011011
lui = 001111 00000 reg1 immediate[16:0]
sub = 000000 reg2 reg3 reg1 00000100010
subu = 000000 reg2 reg3 reg1 00000100011

#
# Multiply and Divide
#
mult = 000000 reg2 reg3 0000000000011000
multu = 000000 reg2 reg3 0000000000011001
mul = 011100 reg2 reg3 reg1 00000000010
madd = 011100 reg1 reg2 0000000000000000
maddu = 011100 reg1 reg2 0000000000000001
msub = 011100 reg1 reg2 0000000000000100
msubu = 011100 reg1 reg2 0000000000000101
mfhi = 000000 0000000000 reg1 00000010000
mflo = 000000 0000000000 reg1 00000010010
mthi = 000000 0000000000 reg1 00000010001
mtlo = 000000 0000000000 reg1 00000010011

#
# Logic
#
and = 000000 reg2 reg3 reg1 00000100100
andi = 001100 reg2 reg1 immediate[16:0]
nor = 000000 reg2 reg3 reg1 00000100111
or = 000000 reg2 reg3 reg1 00000100101
ori = 001101 reg2 reg1 immediate[16:0]
xor = 000000 reg2 reg3 reg1 00000100110
xori = 001110 reg2 reg1 immediate[16:0]

#
# Shift
#
sll = 000000 00000 reg2 reg1 immediate[5:0] 000000
sllv = 000000 reg2 reg3 reg1 00000000100
sra = 000000 00000 reg2 reg1 immediate[5:0] 000011
srav = 000000 reg2 reg3 reg1 00000000111
srl = 000000 00000 reg2 reg1 immediate[5:0] 000010
srlv = 000000 reg2 reg3 reg1 00000000110

#
# Comparison
#
movn = 000000 reg2 reg3 reg1 00000001011
movz = 000000 reg2 reg3 reg1 00000001010
slt = 000000 reg2 reg3 reg1 00000101010
sltu = 000000 reg2 reg3 reg1 00000101011
slti = 001010 reg1 reg2 immediate[16:0]
sltiu = 001011 reg1 reg2 immediate[16:0]

#
# Branch
#
beq = 000100 reg1 reg2 target_relative[16:0]
bgez = 000001 reg1 00001 target_relative[16:0]
bgezal = 000001 reg1 10001 target_relative[16:0]
bgtz = 000111 reg1 00000 target_relative[16:0]
blez = 000110 reg1 00000 target_relative[16:0]
bltz = 000001 reg1 00000 target_relative[16:0]
bltzal = 000001 reg1 10000 target_relative[16:0]
bne = 000101 reg1 reg2 target_relative[16:0]

bc1f = 010001 01000 000 00 target_relative[16:0]
bc1t = 010001 01000 000 01 target_relative[16:0]

#
# Jump
#
j = 000010 target_absolute[26:0]
jal = 000011 target_absolute[26:0]
jalr = 000000 reg1 000000000000000001001
jr = 000000 reg1 000000000000000001000

#
# Load and Store
#
lb = 100000 reg2 reg1 immediate[16:0]
lbu = 100100 reg2 reg1 immediate[16:0]
lh = 100001 reg2 reg1 immediate[16:0]
lhu = 100101 reg2 reg1 immediate[16:0]
lw = 100011 reg2 reg1 immediate[16:0]
lwl = 100010 reg2 reg1 immediate[16:0]
lwr = 100110 reg2 reg1 immediate[16:0]
sb = 101000 reg2 reg1 immediate[16:0]
sh = 101001 reg2 reg1 immediate[16:0]
sw = 101011 reg2 reg1 immediate[16:0]
swl = 101010 reg2 reg1 immediate[16:0]
swr = 101110 reg2 reg1 immediate[16:0]

lwc1 = 110001 reg1 fpr1 immediate[16:0]
swc1 = 111001 reg1 fpr1 immediate[16:0]
sdc1 = 111101 reg1 fpr1 immediate[16:0]

#
# Data Movement
#
mfc0 = 001010 00000 reg2 reg1 00000000000
mfc1 = 001011 00000 reg1 fpr1 00000000000
mtc0 = 001010 00100 reg2 reg1 00000000000
mtc1 = 001011 00100 reg1 fpr1 00000000000
movf = 000000 reg1 000 00 reg2 00000000001
movt = 000000 reg1 000 01 reg2 00000000001

#
# Atomic Read-Modify-Write
#
ll = 110000 reg2 reg1 immediate[16:0]
sc = 111000 reg2 reg1 immediate[16:0]

#
# Floating Point Arithmetic
#
abs.d = 010001 00001 00000 fpr2 fpr1 000101
abs.s = 010001 00000 00000 fpr2 fpr1 000101
add.d = 010001 01011 fpr3 fpr2 fpr1 000000
add.s = 010001 01010 fpr3 fpr2 fpr1 000000
ceil.w.d = 010001 01011 00000 fpr2 fpr1 001110
ceil.w.s = 010001 01010 00000 fpr2 fpr1 001110
div.d = 010001 01011 fpr3 fpr2 fpr1 000011
div.s = 010001 01010 fpr3 fpr2 fpr1 000011
floor.w.d = 010001 01011 00000 fpr2 fpr1 001111
floor.w.s = 010001 01010 00000 fpr2 fpr1 001111
mov.d = 010001 01011 00000 fpr2 fpr1 000110
mov.s = 010001 01010 00000 fpr2 fpr1 000110
movf.d = 010001 01011 000 00 fpr2 fpr1 010001
movf.s = 010001 01010 000 00 fpr2 fpr1 010001
movt.d = 010001 01011 000 01 fpr2 fpr1 010001
movt.s = 010001 01010 000 01 fpr2 fpr1 010001
movn.d = 010001 01011 fpr3 fpr2 fpr1 010011
movn.s = 010001 01010 fpr3 fpr2 fpr1 010011
movz.d = 010001 01011 fpr3 fpr2 fpr1 010010
movz.s = 010001 01010 fpr3 fpr2 fpr1 010010
mul.d = 010001 01011 fpr3 fpr2 fpr1 000010
mul.s = 010001 01010 fpr3 fpr2 fpr1 000010
neg.d = 010001 01011 00000 fpr2 fpr1 000111
neg.s = 010001 01010 00000 fpr2 fpr1 000111
round.w.d = 010001 01011 00000 fpr2 fpr1 001100
round.w.s = 010001 01010 00000 fpr2 fpr1 001100
sqrt.d = 010001 01011 00000 fpr2 fpr1 000100
sqrt.s = 010001 01010 00000 fpr2 fpr1 000100
sub.d = 010001 01011 fpr3 fpr2 fpr1 000001
sub.s = 010001 01010 fpr3 fpr2 fpr1 000001
trunc.w.d = 010001 01011 00000 fpr2 fpr1 001101
trunc.w.s = 010001 01010 00000 fpr2 fpr1 001101

#
# Floating Point Comparisons
#
c.eq.d = 010001 01011 fpr2 fpr1 000 00 00 0010
c.eq.s = 010001 01010 fpr2 fpr1 000 00 00 0010
c.le.d = 010001 01011 fpr2 fpr1 000 00 00 1110
c.le.s = 010001 01010 fpr2 fpr1 000 00 00 1110
c.lt.d = 010001 01011 fpr2 fpr1 000 00 00 1100
c.lt.s = 010001 01010 fpr2 fpr1 000 00 00 1100

#
# Other
#
noop = 00000000000000000000000000000000
syscall = 00000000000000000000000000001100