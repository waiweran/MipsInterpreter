#
# Arithmetic
#
add = backend.program.opcode.arithmetic.Add
addu = backend.program.opcode.arithmetic.Add
addi = backend.program.opcode.arithmetic.AddImmediate
addiu = backend.program.opcode.arithmetic.AddImmediate
clo = backend.program.opcode.arithmetic.CountLeadingOnes
clz = backend.program.opcode.arithmetic.CountLeadingZeros
lui = backend.program.opcode.arithmetic.LoadUpperImmediate
sub = backend.program.opcode.arithmetic.Subtract
subu = backend.program.opcode.arithmetic.Subtract

#
# Multiply and Divide
#
div = backend.program.opcode.multdiv.Divide
divu = UNIMPLEMENTED
mult = backend.program.opcode.multdiv.Multiply
multu = UNIMPLEMENTED
mul = backend.program.opcode.arithmetic.Multiply
madd = UNIMPLEMENTED
maddu = UNIMPLEMENTED
msub = UNIMPLEMENTED
msubu = UNIMPLEMENTED
mfhi = backend.program.opcode.multdiv.MoveFromHI
mflo = backend.program.opcode.multdiv.MoveFromLO
mthi = backend.program.opcode.multdiv.MoveToHI
mtlo = backend.program.opcode.multdiv.MoveToLO

#
# Logic
#
and = backend.program.opcode.logic.And
andi = backend.program.opcode.logic.AndImmediate
nor = backend.program.opcode.logic.Nor
or = backend.program.opcode.logic.Or
ori = backend.program.opcode.logic.OrImmediate
xor = backend.program.opcode.logic.ExclusiveOr
xori = backend.program.opcode.logic.ExclusiveOrImmediate

#
# Shift
#
sll = backend.program.opcode.shift.ShiftLeft
sllv = backend.program.opcode.shift.ShiftLeftVariable
sra = backend.program.opcode.shift.ShiftRightArithmetic
srav = backend.program.opcode.shift.ShiftRightArithmeticVariable
srl = backend.program.opcode.shift.ShiftRightLogical
srlv = backend.program.opcode.shift.ShiftRightLogicalVariable

#
# Comparison
#
movn = backend.program.opcode.comparison.MoveNonzero
movz = backend.program.opcode.comparison.MoveZero
slt = backend.program.opcode.comparison.SetLessThan
sltu = UNIMPLEMENTED
slti = backend.program.opcode.comparison.SetLessThanImmediate
sltiu = UNIMPLEMENTED

#
# Branch
#
beq = backend.program.opcode.jumpbranch.BranchEquals
bgez = backend.program.opcode.jumpbranch.BranchGreaterEqualsZero
bgezal = backend.program.opcode.jumpbranch.BranchGreaterEqualsZeroAndLink
bgtz = backend.program.opcode.jumpbranch.BranchGreaterZero
blez = backend.program.opcode.jumpbranch.BranchLessEqualsZero
bltz = backend.program.opcode.jumpbranch.BranchLessZero
bltzal = backend.program.opcode.jumpbranch.BranchLessZeroAndLink
bne = backend.program.opcode.jumpbranch.BranchNotEquals

bc1f = backend.program.opcode.float_branch.BranchFalse
bc1t = backend.program.opcode.float_branch.BranchTrue

#
# Jump
#
j = backend.program.opcode.jumpbranch.Jump
jal = backend.program.opcode.jumpbranch.JumpAndLink
jalr = backend.program.opcode.jumpbranch.JumpAndLinkRegister
jr = backend.program.opcode.jumpbranch.JumpRegister

#
# Load and Store
#
lb = backend.program.opcode.loadstore.LoadByte
lbu = UNIMPLEMENTED
lh = UNIMPLEMENTED
lhu = UNIMPLEMENTED
lw = backend.program.opcode.loadstore.LoadWord
lwl = UNIMPLEMENTED
lwr = UNIMPLEMENTED
sb = backend.program.opcode.loadstore.StoreByte
sh = UNIMPLEMENTED
sw = backend.program.opcode.loadstore.StoreWord
swl = UNIMPLEMENTED
swr = UNIMPLEMENTED

lwc1 = backend.program.opcode.loadstore.LoadFloat
swc1 = backend.program.opcode.loadstore.StoreFloat
sdc1 = backend.program.opcode.loadstore.StoreDouble

#
# Data Movement
#
mfc0 = UNIMPLEMENTED
mfc1 = backend.program.opcode.float_s.MoveFloatToInt
mtc0 = UNIMPLEMENTED
mtc1 = backend.program.opcode.float_s.MoveIntToFloat
movf = UNIMPLEMENTED
movt = UNIMPLEMENTED

#
# Atomic Read-Modify-Write
#
ll = UNIMPLEMENTED
sc = UNIMPLEMENTED

#
# Floating Point Arithmetic
#
abs.d = UNIMPLEMENTED
abs.s = UNIMPLEMENTED
add.d = backend.program.opcode.float_d.AddDouble
add.s = backend.program.opcode.float_s.AddFloat
div.d = backend.program.opcode.float_d.DivideDouble
div.s = backend.program.opcode.float_s.DivideFloat
mov.d = backend.program.opcode.float_d.MoveDouble
mov.s = backend.program.opcode.float_s.MoveFloat
movf.d = UNIMPLEMENTED
movf.s = UNIMPLEMENTED
movt.d = UNIMPLEMENTED
movt.s = UNIMPLEMENTED
movn.d = UNIMPLEMENTED
movn.s = UNIMPLEMENTED
movz.d = UNIMPLEMENTED
movz.s = UNIMPLEMENTED
mul.d = backend.program.opcode.float_d.MultiplyDouble
mul.s = backend.program.opcode.float_s.MultiplyFloat
neg.d = UNIMPLEMENTED
neg.s = UNIMPLEMENTED
sqrt.d = UNIMPLEMENTED
sqrt.s = UNIMPLEMENTED
sub.d = backend.program.opcode.float_d.SubtractDouble
sub.s = backend.program.opcode.float_s.SubtractFloat

#
# Floating Point Comparisons
#
c.eq.d = backend.program.opcode.float_branch.CompareEqualDouble
c.eq.s = backend.program.opcode.float_branch.CompareEqual
c.le.d = backend.program.opcode.float_branch.CompareLessEqualsDouble
c.le.s = backend.program.opcode.float_branch.CompareLessEquals
c.lt.d = backend.program.opcode.float_branch.CompareLessThanDouble
c.lt.s = backend.program.opcode.float_branch.CompareLessThan

#
# Type Conversions
#
ceil.w.d = UNIMPLEMENTED
ceil.w.s = UNIMPLEMENTED
cvt.d.s = backend.program.opcode.type_conversion.ConvertFloatToDouble
cvt.d.w = backend.program.opcode.type_conversion.ConvertIntToDouble
cvt.s.d = backend.program.opcode.type_conversion.ConvertDoubleToFloat
cvt.s.w = backend.program.opcode.type_conversion.ConvertIntToFloat
cvt.w.d = backend.program.opcode.type_conversion.ConvertDoubleToInt
cvt.w.s = backend.program.opcode.type_conversion.ConvertFloatToInt
floor.w.d = UNIMPLEMENTED
floor.w.s = UNIMPLEMENTED
round.w.d = UNIMPLEMENTED
round.w.s = UNIMPLEMENTED
trunc.w.d = UNIMPLEMENTED
trunc.w.s = UNIMPLEMENTED

#
# Other
#
noop = backend.program.opcode.pseudoinstruction.NoOperation
nop = backend.program.opcode.pseudoinstruction.NoOperation
syscall = backend.program.opcode.Syscall

#
# Single Line Integer Pseudoinstructions
#
move = backend.program.opcode.pseudoinstruction.Move
neg = backend.program.opcode.pseudoinstruction.Negate
negu = backend.program.opcode.pseudoinstruction.Negate
not = backend.program.opcode.pseudoinstruction.Not
b = backend.program.opcode.jumpbranch.Jump
bal = backend.program.opcode.jumpbranch.JumpAndLink
beqz = backend.program.opcode.pseudoinstruction.BranchEqualZero
bnez = backend.program.opcode.pseudoinstruction.BranchNotEqualZero

#
# Single Line Floating Point Pseudoinstructions
#
l.s = backend.program.opcode.loadstore.LoadFloat
s.s = backend.program.opcode.loadstore.StoreFloat
s.d = backend.program.opcode.loadstore.StoreDouble
c.ge.d = backend.program.opcode.float_branch.CompareGreaterEqualsDouble
c.ge.s = backend.program.opcode.float_branch.CompareGreaterEquals
c.gt.d = backend.program.opcode.float_branch.CompareGreaterThanDouble
c.gt.s = backend.program.opcode.float_branch.CompareGreaterThan


#
# Compound Pseudoinstructions
#

# Arithmetic
abs = UNSUPPORTED
li = backend.program.opcode.pseudoinstruction.LoadImmediate
# Multiply and Divide
divu = UNSUPPORTED
mulo = UNSUPPORTED
mulou = UNSUPPORTED
rem = UNSUPPORTED
remu = UNSUPPORTED
# Shift
rol = UNSUPPORTED
ror = UNSUPPORTED
# Comparison
seq = backend.program.opcode.pseudoinstruction.SetEqual
sge = backend.program.opcode.pseudoinstruction.SetGreaterEqual
sgeu = UNSUPPORTED
sgt = backend.program.opcode.pseudoinstruction.SetGreaterThan
sgtu = UNSUPPORTED
sle = backend.program.opcode.pseudoinstruction.SetLessEqual
sleu = UNSUPPORTED
sne = backend.program.opcode.pseudoinstruction.SetNotEqual
# Branch
bge = backend.program.opcode.pseudoinstruction.BranchGreaterEquals
bgeu = UNSUPPORTED
bgt = backend.program.opcode.pseudoinstruction.BranchGreaterThan
bgtu = UNSUPPORTED
ble = backend.program.opcode.pseudoinstruction.BranchLessEquals
bleu = UNSUPPORTED
blt = backend.program.opcode.pseudoinstruction.BranchLessThan
bltu = UNSUPPORTED
# Load and Store
la = backend.program.opcode.pseudoinstruction.LoadAddress
ld = UNSUPPORTED
ulh = UNSUPPORTED
ulhu = UNSUPPORTED
ulw = UNSUPPORTED
sd = UNSUPPORTED
ush = UNSUPPORTED
usw = UNSUPPORTED
# Data Movement
mfc1.d = UNSUPPORTED
# Floating Point Arithmetic
li.s = backend.program.opcode.pseudoinstruction.LoadImmediateFloat
l.d = backend.program.opcode.loadstore.LoadDouble
# Floating Point Comparisons
c.ne.d = backend.program.opcode.float_branch.CompareNotEqualDouble
c.ne.s = backend.program.opcode.float_branch.CompareNotEqual
